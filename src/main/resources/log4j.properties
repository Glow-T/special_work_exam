log4j.rootLogger=debug,stdout,R

log4j.appender.stdout=org.apache.log4j.ConsoleAppender 
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout 
log4j.appender.stdout.layout.ConversionPattern=%-d{yyyy-MM-dd HH\:mm\:ss,SSS} [%c]-[%p] %m%n 

log4j.appender.R=org.apache.log4j.DailyRollingFileAppender
#c3po config
log4j.logger.com.opensymphony=warn
log4j.logger.com.mchange=warn
#spring config
log4j.logger.org.springframework=warn
#mybatis config
log4j.logger.org.apache.ibatis.logging=debug
log4j.logger.org.apache.ibatis.datasource.pooled=debug
log4j.logger.org.apache.ibatis.transaction.jdbc=debug
log4j.logger.org.mybatis.spring=debug
#\u8C03\u8BD5\u65F6\u770Bsql\u8BED\u53E5 \u5C06 warn\u53D8\u4E3A debug\u5C31\u53EF\u4EE5\u4E86
log4j.logger.com.ljy.dao=debug


# beanutil config
log4j.logger.org.apache.commons.beanutils=debug

#struts2 config
#log4j.logger.org.apache.struts2=warn
log4j.logger.freemarker=warn
log4j.appender.R.File=${catalina.home}/logs/ssm.log
#log4j.appender.R.File=E:/workspace/WdSIDeom/log/wdsidemo.log
log4j.appender.R.layout=org.apache.log4j.PatternLayout 
log4j.appender.R.layout.ConversionPattern=%d{yyyy-MM-dd HH\:mm\:ss,SSS} [%t] [%c] [%p] - %m%n

#
#整理下语法规范:
#log4j.rootLogger=输出级别,输出目的地
#log4j.appender.输出目的地=文件输出目的地的值（下面有五种可选值）
#log4j.appender.输出目的地.输出目的地属性=输出目的地属性值（依据输出目的地有相应的属性值，在下面有展示）
#log4j.appender.输出目的地.layout = 输出目的地布局方式的值（下面有四种布局方式的可选值）
#log4j.appender.输出目的地.layout.属性名=属性值（依据每种布局方式有不同的可选值，常用文件格式在下面有标注）
#
#
#文件的输出目的地可以有以下五种值：
#
#1.org.apache.log4j.ConsoleAppender（控制台_输出目的地的值）
#输出目的地拥有的属性值：
#Threshold=WARN:指定日志消息的输出最低层次
#ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出
#Target=System.err：默认情况下是：System.out,指定输出控制台
#
#2.org.apache.log4j.FileAppender（文件_输出目的地的值）
#输出目的地拥有的属性值：
#Threshold=WARN:指定日志消息的输出最低层次
#ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出
#File=mylog.txt:指定消息输出到mylog.txt文件
#Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容
#
#3.org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件_输出目的地的值）
#输出目的地拥有的属性值：
#Threshold=WARN:指定日志消息的输出最低层次
#ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出
#File=mylog.txt:指定消息输出到mylog.txt文件
#Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容
#DatePattern=''.''yyyy-ww:每周滚动一次文件，即每周产生一个新的文件。当然也可以指定按月、周、天、时和分。即对应的格式如下
#1)''.''yyyy-MM: 每月
#2)''.''yyyy-ww: 每周
#3)''.''yyyy-MM-dd: 每天
#4)''.''yyyy-MM-dd-a: 每天两次
#5)''.''yyyy-MM-dd-HH: 每小时
#6)''.''yyyy-MM-dd-HH-mm: 每分钟

#4.org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件_输出目的地的值）
#输出目的地拥有的属性值：
#Threshold=WARN:指定日志消息的输出最低层次
#ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出
#File=mylog.txt:指定消息输出到mylog.txt文件
#Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容
#MaxFileSize=100KB: 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件
#MaxBackupIndex=2:指定可以产生的滚动文件的最大数

#5.org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方_输出目的地的值）
#输出目的地拥有的属性值：
#Threshold=WARN:指定日志消息的输出最低层次
#ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出
#File=mylog.txt:指定消息输出到mylog.txt文件
#Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容
#MaxFileSize=100KB: 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件
#MaxBackupIndex=2:指定可以产生的滚动文件的最大数


#文件输出目的地布局方式可选值：
#1.org.apache.log4j.HTMLLayout（以HTML表格形式布局）
#LocationInfo=true:默认值是false,输出java文件名称和行号
#Title=my app file: 默认值是 Log4J Log Messages
#2.org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
#ConversionPattern=%m%n :指定怎样格式化指定的消息
#3.org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）
#4.org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）


#常用的控制台显示的符号格式：
#%p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#%r: 输出自应用启动到输出该log信息耗费的毫秒数
#%c: 输出日志信息所属的类目，通常就是所在类的全名
#%t: 输出产生该日志事件的线程名
#%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
#%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
#%%: 输出一个"%"字符
#%F: 输出日志消息产生时所在的文件名称
#%L: 输出代码中的行号
#%m: 输出代码中指定的消息,产生的日志具体信息
#%n: 输出一个回车换行符


#log4j的等级规则：
#log4j是apache基金会的一个项目,日志记录器(Logger)是日志处理的核心组件,log4j具有7种级别(Level).
#DEBUG Level: 指出细粒度信息事件对调试应用程序是非常有帮助的,就是输出debug的信息.
#INFO level: 表明消息在粗粒度级别上突出强调应用程序的运行过程,就是输出提示信息.
#WARN level: 表明会出现潜在错误的情形,就是显示警告信息.
#ERROR level: 指出虽然发生错误事件,但仍然不影响系统的继续运行.就是显示错误信息.
#FATAL level: 指出每个严重的错误事件将会导致应用程序的退出.
#ALL level: 是最低等级的,用于打开所有日志记录.
#OFF level: 是最高等级的,用于关闭所有日志记录.
#
#log4j建议只使用五个级别,级别顺序(由低到高): DEBUG < INFO < WARN < ERROR < FATAL